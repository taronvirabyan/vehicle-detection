"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–∏–¥–µ–æ
"""

import cv2
import numpy as np
import logging
import platform
import os

logger = logging.getLogger(__name__)


def create_browser_compatible_video_writer(output_path, fps, frame_size, use_h264=True):
    """
    –°–æ–∑–¥–∞–µ—Ç VideoWriter —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
    
    Args:
        output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (.mp4 –∏–ª–∏ .webm)
        fps: –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        frame_size: –†–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ (width, height)
        use_h264: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å H.264 (True) –∏–ª–∏ VP8/WebM (False)
        
    Returns:
        cv2.VideoWriter –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    width, height = frame_size
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ç–Ω—ã–µ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–Ω–æ–≥–∏—Ö –∫–æ–¥–µ–∫–æ–≤)
    width = width if width % 2 == 0 else width - 1
    height = height if height % 2 == 0 else height - 1
    frame_size = (width, height)
    
    if use_h264 or output_path.endswith('.mp4'):
        # H.264 –¥–ª—è MP4 - —Å–∞–º—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è H.264 –∫–æ–¥–µ–∫ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã H.264
        h264_codecs = [
            'avc1',  # –û—Å–Ω–æ–≤–Ω–æ–π H.264
            'h264',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
            'x264',  # x264 encoder
            'H264',  # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        ]
        
        for codec in h264_codecs:
            try:
                fourcc = cv2.VideoWriter_fourcc(*codec)
                out = cv2.VideoWriter(output_path, fourcc, fps, frame_size)
                
                if out.isOpened():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω VideoWriter —Å –∫–æ–¥–µ–∫–æ–º: {codec}")
                    return out
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å VideoWriter —Å –∫–æ–¥–µ–∫–æ–º: {codec}")
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å –∫–æ–¥–µ–∫–æ–º {codec}: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–¥–µ–∫–∏, –ø—Ä–æ–±—É–µ–º mp4v
        logger.warning("H.264 –∫–æ–¥–µ–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–±—É–µ–º MP4V")
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, fps, frame_size)
        
        if out.isOpened():
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫–æ–¥–µ–∫ MP4V")
            return out
            
    else:
        # VP8 –¥–ª—è WebM - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VP8 –∫–æ–¥–µ–∫ –¥–ª—è WebM")
        
        webm_codecs = ['VP80', 'VP90']
        
        for codec in webm_codecs:
            try:
                fourcc = cv2.VideoWriter_fourcc(*codec)
                out = cv2.VideoWriter(output_path, fourcc, fps, frame_size)
                
                if out.isOpened():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω VideoWriter —Å –∫–æ–¥–µ–∫–æ–º: {codec}")
                    return out
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å –∫–æ–¥–µ–∫–æ–º {codec}: {e}")
    
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π VideoWriter")
    return None


def convert_to_browser_compatible(input_path, output_path=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, –∑–∞–º–µ–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .mp4)
        
    Returns:
        –ü—É—Ç—å –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if output_path is None:
        base_name = os.path.splitext(input_path)[0]
        output_path = f"{base_name}_browser.mp4"
    
    cap = cv2.VideoCapture(input_path)
    if not cap.isOpened():
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {input_path}")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π writer
    out = create_browser_compatible_video_writer(output_path, fps, (width, height))
    
    if out is None:
        cap.release()
        return None
    
    logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {input_path} -> {output_path}")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {width}x{height}, {fps} FPS, {frame_count} –∫–∞–¥—Ä–æ–≤")
    
    frame_idx = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        out.write(frame)
        
        frame_idx += 1
        if frame_idx % 100 == 0:
            progress = (frame_idx / frame_count) * 100
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
    
    cap.release()
    out.release()
    
    logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_path}")
    return output_path


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã XVID
def example_usage():
    """
    –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    """
    width, height = 640, 480
    fps = 30
    duration = 5  # —Å–µ–∫—É–Ω–¥
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å H.264 –∫–æ–¥–µ–∫–æ–º
    output_path = "browser_compatible_video.mp4"
    out = create_browser_compatible_video_writer(output_path, fps, (width, height))
    
    if out is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VideoWriter")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    for i in range(fps * duration):
        # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        frame = np.zeros((height, width, 3), dtype=np.uint8)
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        color_value = int((i / (fps * duration)) * 255)
        frame[:, :] = [color_value, 255 - color_value, 128]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text = f"Frame {i+1}/{fps*duration}"
        cv2.putText(frame, text, (50, 50), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        
        # –î–≤–∏–∂—É—â–∏–π—Å—è –∫—Ä—É–≥
        circle_x = int((i / (fps * duration)) * width)
        cv2.circle(frame, (circle_x, height//2), 30, (0, 255, 0), -1)
        
        out.write(frame)
    
    out.release()
    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–¥–µ–∫–æ–≤
def check_codec_support():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–∏–¥–µ–æ
    """
    test_codecs = {
        'H.264': ['avc1', 'h264', 'x264', 'H264'],
        'MPEG-4': ['mp4v', 'MP4V'],
        'WebM': ['VP80', 'VP90'],
        'XVID': ['XVID', 'xvid'],  # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ!
    }
    
    width, height = 640, 480
    results = {}
    
    for format_name, codecs in test_codecs.items():
        results[format_name] = {}
        for codec in codecs:
            try:
                fourcc = cv2.VideoWriter_fourcc(*codec)
                temp_file = f"test_{codec}.mp4" if format_name != 'WebM' else f"test_{codec}.webm"
                out = cv2.VideoWriter(temp_file, fourcc, 30, (width, height))
                
                if out.isOpened():
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    frame = np.zeros((height, width, 3), dtype=np.uint8)
                    out.write(frame)
                    out.release()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                    if os.path.exists(temp_file) and os.path.getsize(temp_file) > 0:
                        results[format_name][codec] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                        os.remove(temp_file)
                    else:
                        results[format_name][codec] = "‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
                else:
                    results[format_name][codec] = "‚ùå Writer –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è"
                    
            except Exception as e:
                results[format_name][codec] = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–¥–µ–∫–æ–≤ ===")
    print("–ë—Ä–∞—É–∑–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç: H.264, WebM (VP8/VP9)")
    print("–ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç: XVID, DivX, –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–¥–µ–∫–∏\n")
    
    for format_name, codecs in results.items():
        print(f"\n{format_name}:")
        for codec, status in codecs.items():
            browser_support = "üåê –ë—Ä–∞—É–∑–µ—Ä ‚úÖ" if format_name in ['H.264', 'WebM'] else "üåê –ë—Ä–∞—É–∑–µ—Ä ‚ùå"
            print(f"  {codec}: {status} | {browser_support}")
    
    return results


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–¥–µ–∫–æ–≤
    check_codec_support()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –±—Ä–∞—É–∑–µ—Ä-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –≤–∏–¥–µ–æ
    print("\n\n=== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ ===")
    example_usage()